-- 1.	用 SQL 语句，建立如下所示的表 cqupt_student
CREATE TABLE CQUPT_STUDENT(
STUDENT VARCHAR(10),
NAME VARCHAR(20),
SEX VARCHAR(2),
AGE INTEGER,
FEE DECIMAL(10,2),
ADDRESS VARCHAR(50),
MEMO VARCHAR(300)
);

-- 2.	用 Create Table 语句建表 CourseAa
CREATE TABLE COURSEAA(
AA1 VARCHAR(20),
AA2 INTEGER,
AA3 DECIMAL(10)
);

-- 3.	用Create Table 语句建表 ChooseBb
CREATE TABLE CHOOSEBB(
BB1 VARCHAR(30),
BB2 INTEGER,
BB3 DECIMAL(6)
);

-- 4.	用 Alter Table 语句更新表 ChooseBb，添加一个属性名 Bb4，类型 Varchar,长度 20,完整性约束设为非空值，缺省值设为字符“系统测试值”。
ALTER TABLE CHOOSEBB ADD BB4 VARCHAR(20) NOT NULL;

-- 5.	用 Alter Table 语句更新表 ChooseBb，添加一个属性名 Bb5，类型 Varchar长度 10，完整性约束设为主码。
ALTER TABLE CHOOSEBB ADD BB5 VARCHAR(10) PRIMARY KEY;

-- 6.	用 Create View 语句建立一个视图 View_Choosebb,生成的视图属性名（View_bb1，View_bb2，view_bb3）, 其中 View_bb1 对应于基表 ChooseBb的 Bb1、View_bb2 对应于基表 ChooseBb 的 Bb4、view_bb3 对应于基表ChooseBb 的 Bb5。
CREATE VIEW VIEW_CHOOSEBB(
VIEW_BB1,
VIEW_BB2,
VIEW_BB3
)
AS SELECT BB1, BB4, BB5 FROM CHOOSEBB;

-- 7.	用 Drop View 语句删除视图 View_Choosebb。
DROP VIEW VIEW_CHOOSEBB;

-- 8.	用 Create Index 语句对表 ChooseBb 的 Bb2 属性建立一个升序索引，索引名 Index_bb2。 用 Create Index 语句对表 ChooseBb 的 Bb4 属性建立一个降序索引，索引名 Index_bb4。
CREATE INDEX INDEX_BB2 ON CHOOSEBB(BB2);
CREATE INDEX INDEX_BB4 ON CHOOSEBB(BB4 DESC);

-- 9.	用 Drop Index 语句删除索引 Index_bb2。
DROP INDEX INDEX_BB2 ON CHOOSEBB;

-- 10.	用 Create Table 语句建立 test 表
CREATE TABLE TEST(
NAME VARCHAR(20),
AGE INTEGER,
SCORE NUMERIC(10,2),
ADDRESS VARCHAR(60)
) CHARACTER SET UTF8;

-- 11.	用 INSERT 语句对表 test,插入如下 6 条记录：
INSERT INTO TEST VALUES('赵一', 20, 580.00, '重邮宿舍 12-3-5');
INSERT INTO TEST VALUES("钱二", 19, 540.00, "南福苑 5-2-9");
INSERT INTO TEST VALUES("孙三", 21, 555.50, "学生新区 21-5-15");
INSERT INTO TEST VALUES("李四", 22, 505.00, "重邮宿舍 8-6-22");
INSERT INTO TEST VALUES("周五", 20, 495.50, "学生新区 23-4-8");
INSERT INTO TEST VALUES("吴六", 19, 435.00, "南福苑 2-5-12");

-- 12.	再用 Create Table 语句建立 test_temp 表
CREATE TABLE TEST_TEMP(
NAME VARCHAR(20),
AGE INTEGER,
SCORE NUMERIC(10,2),
ADDRESS VARCHAR(60)
) CHARACTER SET UTF8;

-- 13.	用 INSERT 语句对表 test_temp,插入如下 3 条记录
INSERT INTO TEST_TEMP VALUES("郑七", 21, 490.50, "重邮宿舍 11-2-1");
INSERT INTO TEST_TEMP VALUES("张八", 20, 560.00, "南福苑 3-3-3");
INSERT INTO TEST_TEMP VALUES("王九", 10, 515.00, "学生新区 19-7-1");

-- 14.	用 INSERT INTO ... SELECT ... FROM 语句，将 test_temp 表中的数据，插入到 test 表中。
INSERT INTO TEST SELECT * FROM TEST_TEMP;

-- 15.	用 UPDATE 语句将 test 表中年龄小于等于 20 的数据，将成绩更新为原来的成绩加 5 分。
UPDATE TEST SET SCORE = SCORE + 5 WHERE AGE <= 20;

-- 16.	用 UPDATE 语句将 test 表中居住在南福苑所有学生的年龄减少 1 岁。
UPDATE TEST SET AGE = AGE - 1 WHERE ADDRESS LIKE '%南福苑%';

-- 17.	用 DELETE 语句将 test 表中年龄大于等于 21 并且成绩大于等于 500 的学生数据删除掉。
DELETE FROM TEST WHERE AGE >= 21 AND SCORE >= 500;

-- 18.	用 DELETE 语句将 test 表中成绩小于 550 并且居住在重邮宿舍的学生数据删除掉。
DELETE FROM TEST WHERE SCORE < 550 AND ADDRESS LIKE '%重邮宿舍%';

-- 19.	用 Create Table 建立 Student 表
CREATE TABLE STUDENT(
SN0 VARCHAR(20),
NAME VARCHAR(10),
AGE INTEGER,
COLLEGE VARCHAR(30)
) CHARACTER SET UTF8;

-- 20.	用 Create Table 建立 Course 表
CREATE TABLE COURSE(
COURSEID VARCHAR(15),
COURSENAME VARCHAR(30),
COURSEBEFOREID VARCHAR(15)
) CHARACTER SET UTF8;

-- 21.	用 Create Table 建立 Choose 表
CREATE TABLE CHOOSE(
SN0 VARCHAR(20),
COURSEID VARCHAR(30),
SCORE DECIMAL(5,2)
) CHARACTER SET UTF8;

-- 22.	用 INSERT 语句向 Student 表中插入 3 个元组：
INSERT INTO STUDENT VALUES('S00001', '张三', 20, '计算机学院');
INSERT INTO STUDENT VALUES('S00002', '李四', 19, '通信学院');
INSERT INTO STUDENT VALUES('S00003', '王五', 21, '计算机学院');

-- 23.	用 INSERT 语句向 Course 表中插入 3 个元组
INSERT INTO COURSE VALUES('C1','计算机引论', NULL);
INSERT INTO COURSE VALUES('C2','C语言', 'C1');
INSERT INTO COURSE VALUES('C3','数据结构', 'C2');

-- 24.	用 INSERT 语句向 Choose 表中插入 7 个元组
INSERT INTO CHOOSE VALUES('S00001', 'C1', 95);
INSERT INTO CHOOSE VALUES('S00001', 'C2', 80);
INSERT INTO CHOOSE VALUES('S00001', 'C3', 84);
INSERT INTO CHOOSE VALUES('S00002', 'C1', 80);
INSERT INTO CHOOSE VALUES('S00002', 'C2', 85);
INSERT INTO CHOOSE VALUES('S00003', 'C1', 78);
INSERT INTO CHOOSE VALUES('S00003', 'C3', 70);

-- 25.	用 SELECT 语句，查询计算机学院学生的学号和姓名。
SELECT SN0, NAME FROM STUDENT WHERE COLLEGE LIKE '%计算机学院%';

-- 26.	用 SELECT 语句的 between…and…表示查询条件，查询年龄在 20~23 岁的学生信息。
SELECT * FROM STUDENT WHERE AGE BETWEEN 20 AND 23;

-- 27.	用 SELECT 语句的 COUNT()聚集函数，统计 Student 表中学生总人数。
SELECT COUNT(SN0) AS COUNT FROM STUDENT;

-- 28.	分别用 SELECT 语句的 max()、min()、sum()、avg()四个聚集函数，计算Choose 表中 C1 课程的最高分、最低分、总分、平均分。
SELECT MAX(SCORE) AS MAX FROM CHOOSE WHERE COURSEID = 'C1';
SELECT MIN(SCORE) AS MIN FROM CHOOSE WHERE COURSEID = 'C1';
SELECT SUM(SCORE) AS SUM FROM CHOOSE WHERE COURSEID = 'C1';
SELECT AVG(SCORE) AS AVG FROM CHOOSE WHERE COURSEID = 'C1';

-- 29.	用 SELECT 语句对空值(NULL)的判断条件，查询 Course 表中先修课称编号为空值的课程编号和课程名称。
SELECT COURSEID, COURSENAME FROM COURSE WHERE COURSEBEFOREID IS NULL;

-- 30.	用 SELECT 语句的连接查询，查询学生的学号、姓名、选修的课程名及成绩。
SELECT ST.SN0, ST.NAME, CO.COURSEID, CH.SCORE FROM STUDENT AS ST LEFT JOIN CHOOSE AS CH LEFT JOIN COURSE AS CO ON CH.COURSEID = CO.COURSEID ON CH.SN0 = ST.SN0;

-- 31.	用 SELECT 的存在量词 EXISTS，查询与“张三”在同一个学院学习的学生信息
SELECT * FROM STUDENT AS S WHERE EXISTS (SELECT 1 FROM STUDENT AS ST WHERE ST.NAME = '张三' AND ST.COLLEGE = S.COLLEGE);

-- 32.	用 SELECT 语句的嵌套查询，查询选修 C1 课程的成绩低于“张三”的学生的学号和成绩。
SELECT SN0, SCORE FROM CHOOSE WHERE COURSEID = 'C1' AND SCORE <
ANY(SELECT SCORE FROM STUDENT,CHOOSE WHERE STUDENT.SN0 = CHOOSE.SN0 AND COURSEID = 'C1' AND NAME = '张三');

-- 33.	用 SELECT 语句的组合查询(UNION)，查询选修了 C1 课程或者选修了 C3课程的学生学号。
SELECT SN0 FROM CHOOSE WHERE COURSEID = 'C1' UNION SELECT SN0 FROM CHOOSE WHERE COURSEID = 'C3';

-- 34.	用 SELECT 语句的组合查询(UNION)与 DISTINCT 短语，查询选修了 C1 课程或者选修了 C3 课程的学生学号，并取消重复的数据。
SELECT DISTINCT SN0 FROM STUDENT WHERE SN0 IN (SELECT SN0 FROM CHOOSE WHERE COURSEID = 'C1') UNION
SELECT DISTINCT SN0 FROM STUDENT WHERE SN0 IN (SELECT SN0 FROM CHOOSE WHERE COURSEID = 'C3');